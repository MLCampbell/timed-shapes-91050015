{"version":3,"sources":["Shape/Shape.js","App.js","serviceWorker.js","index.js"],"names":["Shape","colors","state","bgColor","Math","floor","random","length","size","perCent","interval","setInterval","setState","className","style","Object","assign","height","this","width","backgroundColor","borderRadius","Component","App","multipleShapes","i","push","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mTAwCeA,G,6NAlCXC,OAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAC7D,UAAW,W,EAEfC,MAAQ,CACJC,QAAS,EAAKF,OAAQG,KAAKC,MAAMD,KAAKE,SAAW,EAAKL,OAAOM,SAC7DC,KAAOJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACvBG,QAAUL,KAAKC,MAAsB,IAAhBD,KAAKE,W,EAkB9BI,SAAWC,aAAY,WACnB,EAAKC,SACD,CACIJ,KAAOJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACvBH,QAAS,EAAKF,OAAQG,KAAKC,MAAMD,KAAKE,SAAW,EAAKL,OAAOM,SAC7DE,QAAUL,KAAKC,MAAsB,IAAhBD,KAAKE,cAEnC,K,wEApBC,OACI,yBAAKO,UAAU,YAAYC,MAAOC,OAAOC,OACrC,CAAEC,OAAQC,KAAKhB,MAAMM,MACrB,CAAEW,MAAOD,KAAKhB,MAAMM,QAEpB,yBAAKK,UAAU,QAAQC,MAAOC,OAAOC,OACjC,CAAEI,gBAAiBF,KAAKhB,MAAMC,SAC9B,CAAEkB,aAAcH,KAAKhB,MAAMO,iB,GApB3Ba,cCgBLC,E,iLAXP,IAFA,IAAMC,EAAiB,GAEfC,EAAI,EAAGA,EAAI,GAAIA,IACnBD,EAAeE,KAAK,kBAAC,EAAD,OAGxB,OACI,6BACCF,O,GAXKF,aCQZK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxC,QACfkC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,GAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCxC/BE,K","file":"static/js/main.7eea510a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Shape.css'\r\nimport '../Container/Container.css'\r\n\r\nclass Shape extends Component {\r\n\r\n    colors = [\"#393E41\", \"#E94F37\", \"#1C89BF\", \"#A1D363\", \"#85FFC7\", \"#297373\",\r\n        \"#FF8552\", \"#A40E4C\"]\r\n        \r\n    state = {\r\n        bgColor: this.colors[(Math.floor(Math.random() * this.colors.length))],\r\n        size: (Math.floor(Math.random() * 125)),\r\n        perCent: (Math.floor(Math.random() * 100))\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\" style={Object.assign(\r\n                { height: this.state.size },\r\n                { width: this.state.size })\r\n            }>\r\n                <div className=\"shape\" style={Object.assign(\r\n                    { backgroundColor: this.state.bgColor },\r\n                    { borderRadius: this.state.perCent })\r\n                }>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    interval = setInterval(() => {\r\n        this.setState(\r\n            {\r\n                size: (Math.floor(Math.random() * 125)),\r\n                bgColor: this.colors[(Math.floor(Math.random() * this.colors.length))],\r\n                perCent: (Math.floor(Math.random() * 100))\r\n            })\r\n    }, 4000)\r\n}\r\n\r\nexport default Shape;\r\n\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Shape from './Shape/Shape'\n\nclass App extends Component {\n\n    render() {\n        const multipleShapes = []\n        // Shape array = shapes * i\n        for(let i = 0; i < 60; i++) { \n            multipleShapes.push(<Shape/>)\n        }\n\n        return (\n            <div>\n            {multipleShapes}\n            </div>\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}